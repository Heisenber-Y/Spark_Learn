
import java.security.Key;
import java.security.SecureRandom;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

/** 
 * 
 * ʹ��DES���������,�ɶ�byte[],String���ͽ��м�������� 
 * ���Ŀ�ʹ��String,byte[]�洢. 
 * 
 * ����: 
 * void getKey(String strKey)��strKey����������һ��Key 
 * 
 * String getEncString(String strMing)��strMing���м���,����String���� 
 * String getDesString(String strMi)��strMin���н���,����String���� 
 * 
 *byte[] getEncCode(byte[] byteS)byte[]�͵ļ��� 
 *byte[] getDesCode(byte[] byteD)byte[]�͵Ľ��� 
 */ 
public class DesEncrypt {
	private static final Log log = LogFactory.getLog(DesEncrypt.class);
	
	Key key; 

	/** 
	 * ���ݲ�������KEY 
	 * @param strKey 
	 */ 
	public void getKey(String strKey)  
	{ 

		try{		
			//��ֹlinux�� �������key
			SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");
			secureRandom.setSeed(strKey.getBytes());  
			
			KeyGenerator _generator = KeyGenerator.getInstance("DES"); 
			_generator.init(secureRandom); 
			this.key = _generator.generateKey(); 
			_generator=null; 
		}catch(Exception e){ 
			log.error(e.getMessage()); 
		} 
	} 
	/** 
	 * ����String��������,String������� 
	 * @param strMing 
	 * @return 
	 */ 
	public String getEncString(String strMing) 
	{ 
		byte[] byteMi = null; 
		byte[] byteMing = null; 
		String strMi = ""; 
		BASE64Encoder base64en = new BASE64Encoder(); 
		try 
		{ 
			byteMing = strMing.getBytes("UTF8"); 
			byteMi = this.getEncCode(byteMing); 
			strMi = base64en.encode(byteMi); 
		} 
		catch(Exception e) 
		{ 
			log.error(e.getMessage()); 
		} 
		finally 
		{ 
			base64en = null; 
			byteMing = null; 
			byteMi = null; 
		} 
		return strMi; 
	} 
	/** 
	 * ���� ��String��������,String������� 
	 * @param strMi 
	 * @return 
	 */ 
	public String getDesString(String strMi) 
	{ 
		BASE64Decoder base64De = new BASE64Decoder(); 
		byte[] byteMing = null; 
		byte[] byteMi = null; 
		String strMing = ""; 
		try 
		{ 
			byteMi = base64De.decodeBuffer(strMi); 
			byteMing = this.getDesCode(byteMi); 
			strMing = new String(byteMing, "UTF8"); 
		} 
		catch(Exception e) 
		{ 
			log.error(e.getMessage()); 
		} 
		finally 
		{ 
			base64De = null; 
			byteMing = null; 
			byteMi = null; 
		} 
		return strMing; 
	} 
	/** 
	 * ������byte[]��������,byte[]������� 
	 * @param byteS 
	 * @return 
	 */ 
	private byte[] getEncCode(byte[] byteS) 
	{ 
		byte[] byteFina = null; 
		Cipher cipher; 
		try 
		{ 
			cipher = Cipher.getInstance("DES"); 
			cipher.init(Cipher.ENCRYPT_MODE, key); 
			byteFina = cipher.doFinal(byteS); 
		} 
		catch(Exception e) 
		{ 
			log.error(e.getMessage()); 
		} 
		finally 
		{ 
			cipher = null; 
		} 
		return byteFina; 
	} 
	/** 
	 * ������byte[]��������,��byte[]������� 
	 * @param byteD 
	 * @return 
	 */ 
	private byte[] getDesCode(byte[] byteD) 
	{ 
		Cipher cipher; 
		byte[] byteFina=null; 
		try{ 
			cipher = Cipher.getInstance("DES"); 
			cipher.init(Cipher.DECRYPT_MODE, key); 
			byteFina = cipher.doFinal(byteD); 
		}catch(Exception e){ 
			log.error(e.getMessage()); 
		}finally{ 
			cipher=null; 
		} 
		return byteFina; 
	}

	public static void main(String[] args){
		String str="rgykh1";
		//String str="@WSX3edc";
		//String str="channel";
		//String str="QWERasdf";
		//String str="rgkhread";
		//String str="#EDC4rfv";
		//String str="rgkh";
		//String str="Gaussdba@Mpp";
		//String str="omm";
		if(args.length>1)
			str=args[1];
		
		log.info("des demo:"+str); 
		DesEncrypt des=new DesEncrypt();//ʵ����һ������ 
		des.getKey("11234");//�����ܳ� 
		log.info("key=1"); 
		String strEnc = des.getEncString(str);//�����ַ���,����String������ 
		log.info("����=["+strEnc+"]"); 

		String strDes = des.getDesString(strEnc);//��String ���͵����Ľ��� 
		log.info("����=["+strDes+"]"); 
	}
}
